{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bluetooth MQTT Gateway \u00b6 Official Website This project is a firmware project for ESP32. Any ESP32 develop board, e.g., NodeMCU, is supported by this project. It enables ESP32 to receive BLE characteristics and send them to a MQTT server. The supported remote BLE devices are as below: hktkzyx/environment-sensor-bluetooth Installation \u00b6 This project is based on PlatformIO . Please install PlatformIO IDE or PlatformIO Core firstly. Then, clone the repository hktkzyx/bluetooth-mqtt-gateway git clone https://github.com/hktkzyx/bluetooth-mqtt-gateway.git cd bluetooth-mqtt-gateway Usage \u00b6 Configuration \u00b6 cp ./src/secrets.h.example ./src/secrets.h In the configuration file secrets.h , either MQTT_IP or MQTT_DOMAIN is required. Other configuration items are required as well. Build & Upload \u00b6 If you use PlatformIO IDE, open this project by VSCode and then upload to the hardware. For PlatformIO Core, upload the firmware by the following command: pio run --target upload Remote BLE devices configuration \u00b6 The gateway stores at most 5 MAC address of the remote BLE devices and repeat connecting to them in turn. Once a remote device connect successfully, the gateway receive the BLE characteristic messages and then disconnect. The remote devices are managed by Bluetooth Series. For example, you can use Serial Bluetooth Terminal in Google Play to send commands. The syntax of commands is described in Reference in details. Contributing \u00b6 Welcome fork this project! I am not professional on the embedded development. I appreciate if you can fix bugs or develop new features. Before your development, please follow the below rules to ensure the code quality. Install pre-commit and follow the Conventional Commits . When pre-commit is installed, run pre-commit install -t pre-commit -t commit-msg And you can also install commitizen to submit your commits. Use clang-format to format your source code. Follow gitflow branch manage strategies. You can install git-flow to manage branches. Then, git config gitflow.branch.master main git config gitflow.prefix.versiontag v git flow init -d License \u00b6 Copyright (c) 2022 hktkzyx. Bluetooth MQTT Gateway firmware is licensed under Mulan PSL v2. You can use this software according to the terms and conditions of the Mulan PSL v2. You may obtain a copy of Mulan PSL v2 at: http://license.coscl.org.cn/MulanPSL2 . THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE. See the Mulan PSL v2 for more details.","title":"Home"},{"location":"#bluetooth-mqtt-gateway","text":"Official Website This project is a firmware project for ESP32. Any ESP32 develop board, e.g., NodeMCU, is supported by this project. It enables ESP32 to receive BLE characteristics and send them to a MQTT server. The supported remote BLE devices are as below: hktkzyx/environment-sensor-bluetooth","title":"Bluetooth MQTT Gateway"},{"location":"#installation","text":"This project is based on PlatformIO . Please install PlatformIO IDE or PlatformIO Core firstly. Then, clone the repository hktkzyx/bluetooth-mqtt-gateway git clone https://github.com/hktkzyx/bluetooth-mqtt-gateway.git cd bluetooth-mqtt-gateway","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#configuration","text":"cp ./src/secrets.h.example ./src/secrets.h In the configuration file secrets.h , either MQTT_IP or MQTT_DOMAIN is required. Other configuration items are required as well.","title":"Configuration"},{"location":"#build-upload","text":"If you use PlatformIO IDE, open this project by VSCode and then upload to the hardware. For PlatformIO Core, upload the firmware by the following command: pio run --target upload","title":"Build &amp; Upload"},{"location":"#remote-ble-devices-configuration","text":"The gateway stores at most 5 MAC address of the remote BLE devices and repeat connecting to them in turn. Once a remote device connect successfully, the gateway receive the BLE characteristic messages and then disconnect. The remote devices are managed by Bluetooth Series. For example, you can use Serial Bluetooth Terminal in Google Play to send commands. The syntax of commands is described in Reference in details.","title":"Remote BLE devices configuration"},{"location":"#contributing","text":"Welcome fork this project! I am not professional on the embedded development. I appreciate if you can fix bugs or develop new features. Before your development, please follow the below rules to ensure the code quality. Install pre-commit and follow the Conventional Commits . When pre-commit is installed, run pre-commit install -t pre-commit -t commit-msg And you can also install commitizen to submit your commits. Use clang-format to format your source code. Follow gitflow branch manage strategies. You can install git-flow to manage branches. Then, git config gitflow.branch.master main git config gitflow.prefix.versiontag v git flow init -d","title":"Contributing"},{"location":"#license","text":"Copyright (c) 2022 hktkzyx. Bluetooth MQTT Gateway firmware is licensed under Mulan PSL v2. You can use this software according to the terms and conditions of the Mulan PSL v2. You may obtain a copy of Mulan PSL v2 at: http://license.coscl.org.cn/MulanPSL2 . THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE. See the Mulan PSL v2 for more details.","title":"License"},{"location":"reference/","text":"Serial Bluetooth Commands \u00b6 Commands \u00b6 The valid command starts with byte 0x01 and end with byte 0x04 . Add command \u00b6 Add command add a device's MAC address to the address list. The valid Add command HEX series is 0x01 + command type (1 byte) + device name (n byte) + 0x03 + device type (1 byte) + MAC address (6 byte) + 0x04 where device name should be the ASCII coding of the device name. By default, the device name should be one of \"sensor1\", \"sensor2\", \"sensor3\", \"sensor4\", and \"sensor5\". Example If you want to add a remote BLE device with MAC address AA:BB:CC:DD:EE:FF in which the firmware is hktkzyx/environment-sensor-bluetooth , the valid Add command HEX series is 0x 01 05 73 65 6E 73 6F 72 31 03 05 AA BB CC DD EE FF 04 where the first byte 0x05 is the command type of Add command and the second byte 0x05 is the device type. The bytes 0x 73 65 6E 73 6F 72 31 is the ASCII coding of \"sensor1\". Remove command \u00b6 Remove command remove a device from the address list. The valid Remove command HEX series is 0x01 + command type (1 byte) + device name (n byte) + 0x04 where device name should be the ASCII coding of the device name. By default, the device name should be one of \"sensor1\", \"sensor2\", \"sensor3\", \"sensor4\", and \"sensor5\". Example If you want to remove a remote BLE device naming sensor1 the valid Remove command HEX series is 0x 01 06 73 65 6E 73 6F 72 31 04 where the first byte 0x06 is the command type of Remove command. The bytes 0x 73 65 6E 73 6F 72 31 is the ASCII coding of \"sensor1\". Get command \u00b6 Get command get the device's name, type, and MAC address from the address list. The valid Get command HEX series is 0x01 + command type (1 byte) + device name (n byte) + 0x04 where device name should be the ASCII coding of the device name. By default, the device name should be one of \"sensor1\", \"sensor2\", \"sensor3\", \"sensor4\", and \"sensor5\". Example If you want to get the info of the remote BLE device naming sensor1 the valid Get command HEX series is 0x 01 07 73 65 6E 73 6F 72 31 04 where the first byte 0x07 is the command type of Remove command. The bytes 0x 73 65 6E 73 6F 72 31 is the ASCII coding of \"sensor1\". Clear command \u00b6 Clear command clear all stored devices' info. The valid Clear command HEX series is 0x01 + command type (1 byte) + 0x04 Example If you want to clear all stored info the valid Clear command HEX series is 0x 01 08 04 where the first byte 0x08 is the command type of Clear command. Command type \u00b6 Command Command type Add 0x05 Remove 0x06 Get 0x07 Clear 0x08 Device type \u00b6 The supported remote BLE devices and their device type are as below: Device Device type hktkzyx/environment-sensor-bluetooth 0x05","title":"Reference"},{"location":"reference/#serial-bluetooth-commands","text":"","title":"Serial Bluetooth Commands"},{"location":"reference/#commands","text":"The valid command starts with byte 0x01 and end with byte 0x04 .","title":"Commands"},{"location":"reference/#add-command","text":"Add command add a device's MAC address to the address list. The valid Add command HEX series is 0x01 + command type (1 byte) + device name (n byte) + 0x03 + device type (1 byte) + MAC address (6 byte) + 0x04 where device name should be the ASCII coding of the device name. By default, the device name should be one of \"sensor1\", \"sensor2\", \"sensor3\", \"sensor4\", and \"sensor5\". Example If you want to add a remote BLE device with MAC address AA:BB:CC:DD:EE:FF in which the firmware is hktkzyx/environment-sensor-bluetooth , the valid Add command HEX series is 0x 01 05 73 65 6E 73 6F 72 31 03 05 AA BB CC DD EE FF 04 where the first byte 0x05 is the command type of Add command and the second byte 0x05 is the device type. The bytes 0x 73 65 6E 73 6F 72 31 is the ASCII coding of \"sensor1\".","title":"Add command"},{"location":"reference/#remove-command","text":"Remove command remove a device from the address list. The valid Remove command HEX series is 0x01 + command type (1 byte) + device name (n byte) + 0x04 where device name should be the ASCII coding of the device name. By default, the device name should be one of \"sensor1\", \"sensor2\", \"sensor3\", \"sensor4\", and \"sensor5\". Example If you want to remove a remote BLE device naming sensor1 the valid Remove command HEX series is 0x 01 06 73 65 6E 73 6F 72 31 04 where the first byte 0x06 is the command type of Remove command. The bytes 0x 73 65 6E 73 6F 72 31 is the ASCII coding of \"sensor1\".","title":"Remove command"},{"location":"reference/#get-command","text":"Get command get the device's name, type, and MAC address from the address list. The valid Get command HEX series is 0x01 + command type (1 byte) + device name (n byte) + 0x04 where device name should be the ASCII coding of the device name. By default, the device name should be one of \"sensor1\", \"sensor2\", \"sensor3\", \"sensor4\", and \"sensor5\". Example If you want to get the info of the remote BLE device naming sensor1 the valid Get command HEX series is 0x 01 07 73 65 6E 73 6F 72 31 04 where the first byte 0x07 is the command type of Remove command. The bytes 0x 73 65 6E 73 6F 72 31 is the ASCII coding of \"sensor1\".","title":"Get command"},{"location":"reference/#clear-command","text":"Clear command clear all stored devices' info. The valid Clear command HEX series is 0x01 + command type (1 byte) + 0x04 Example If you want to clear all stored info the valid Clear command HEX series is 0x 01 08 04 where the first byte 0x08 is the command type of Clear command.","title":"Clear command"},{"location":"reference/#command-type","text":"Command Command type Add 0x05 Remove 0x06 Get 0x07 Clear 0x08","title":"Command type"},{"location":"reference/#device-type","text":"The supported remote BLE devices and their device type are as below: Device Device type hktkzyx/environment-sensor-bluetooth 0x05","title":"Device type"}]}